[tool.poetry]
name = "knockoff"
version = "4.4.0"
description = "Library for generating and bootstrapping mock data"
authors = ["Gregory Yu <gregory.yu@nike.com>"]
readme = "README.md"
repository = "https://github.com/Nike-Inc/knockoff-factory"
license = "Apache-2.0"
packages = [
  { include = "knockoff" },
]
maintainers = [
  "Mohamed Abdul Huq Ismail <Abdul.Ismail@nike.com>",
  "Mark Niedzielski <Mark.Niedzielski@nike.com>"
]


[tool.poetry.dependencies]
python = "^3.10.10"
psycopg2 = { version = "^2.9.5" }
Pyrseas = { version = "^0.10.0", optional = true }
# Restrict pandas to <2.0.0 until ready for v2 upgrade.
pandas = { version = "~1.5.3" }
PyYaml = { version = "^6.0.0" }
s3fs = { version = "^0.4.2" }
ipython = { version = "^8.11" }
faker = { version = "^18.9.0" }
dotty_dict = { version = "^1.3.1" }
networkx = { version = "^3.1" }
numpy = { version = "^1.23.5" }
pyarrow = { version = "~10.0.0" }
joblib = { version = "^1.2.0" }
# Restrict to <2.0.0 until databricks-sql-connector and snowflake-sqlalchemy packages
# are compatible with SQLAlchemy>=2.0.0.
SQLAlchemy = { version = "~1.4.48" }
sqlalchemy-utils = { version = ">=0.41.1" }
"testing.postgresql" = { version = ">=1.3.0" }
dependency_injector = { version = "^4.41.0" }
PyMySQL = { version = "~1.0.3", optional = true}

[tool.poetry.dev-dependencies]
pytest = { version = "^7.2.2" }
more-itertools = { version = "==5.0.0" }
pytest-cov = { version = "~2.12.1" }
jupyter = { version = "~1.0.0" }

[tool.poetry.extras]
mysql = ["PyMySQL"]
complete = ["Pyrseas", "PyMySQL"]

[build-system]
requires = ["poetry-core>=1.5.2"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
knockoff = "knockoff.cli_v2:main"

[tool.poetry.plugins."knockoff.cli.command"]
"run" = "knockoff.command.run:main"
"version" = "knockoff.command.version:main"
"legacy" = "knockoff.cli:main"

[tool.poetry.plugins."knockoff.io.readers"]
"pandas.read_csv" = "pandas:read_csv"
"pandas.read_parquet" = "pandas:read_parquet"
"pandas.read_json" = "pandas:read_json"
"read_multi_parquet" = "knockoff.io:read_multi_parquet"
"inline" = "knockoff.io:read_inline"
"sql" = "knockoff.io:read_sql"

[tool.poetry.plugins."knockoff.factory.source.table.load_strategy"]
"io" = "knockoff.io:load_strategy_io"
"knockoff" = "knockoff.factory.table:load_knockoff"

[tool.poetry.plugins."knockoff.factory.sink.dump_strategy"]
"sql" = "knockoff.writer.pandas:to_sql"
"parquet" = "knockoff.writer.pandas:to_parquet"
"noop" = "knockoff.utilities.mixin:noop"

[tool.poetry.plugins."knockoff.factory.source.part.load_strategy"]
"faker" = "knockoff.factory.counterfeit:load_faker"
"cartesian-product" = "knockoff.factory.part:cartesian_product_strategy"
"inline" = "knockoff.factory.part:read_part_inline"
"concat" = "knockoff.factory.part:concat_strategy"
"period" = "knockoff.factory.part:generate_part_periods"
"io" = "knockoff.io:load_strategy_io"

[tool.poetry.plugins."knockoff.factory.source.component.load_strategy"]
"faker" = "knockoff.factory.counterfeit:load_faker_component_generator"
"knockoff" = "knockoff.utilities.mixin:noop"
"autoincrement" = "knockoff.factory.component:load_autoincrement"
"function" = "knockoff.utilities.mixin:noop"

[tool.poetry.plugins."knockoff.factory.source.prototype.load_strategy"]
"components" = "knockoff.factory.prototype:load_prototype_from_components"
"concat" = "knockoff.factory.part:concat_strategy"
"io" = "knockoff.io:load_strategy_io"

[tool.poetry.plugins."knockoff.factory.component.function"]
"numpy.random.poisson" = "numpy.random:poisson"
