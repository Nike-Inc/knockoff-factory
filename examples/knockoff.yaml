
# List of databases to create
# Will use default database configuration
# to create engine for connection if
# config is not provided
create-databases:
  - name: mydb
    type: postgres
    users:
      - user: myuser
        password_env: KNOCKOFF_DB_PASSWORD

yamltodb:
  - path: examples/films.yaml
    database: mydb

knockoff:
  # database section is used to configure
  # database access via set parameters or env
  # variables. If none is specified, the following
  # configuration is available by default (name=default).
  # knockoff.utilities.orm.sql.EngineBuilder.from_config
  # as the factory function to build the sqlalchemy engine
  # from the config
  databases:
    - name: default
      config:
        - property: host
          env_var: KNOCKOFF_DB_HOST
          default: localhost
        - property: port
          env_var: KNOCKOFF_DB_PORT
          default: 5432
        - property: database
          env_var: KNOCKOFF_DB_NAME
          default: postgres
        - property: dialect
          env_var: KNOCKOFF_DB_DIALECT
          default: postgresql
        - property: driver
          env_var: KNOCKOFF_DB_DRIVER
        - property: user
          env_var: KNOCKOFF_DB_USER
          default: postgres
        - property: password
          env_var: KNOCKOFF_DB_PASSWORD
          default: docker
        - property: uri
          env_var: KNOCKOFF_DB_URI

  dag:
    # Loading data into existing table
    - name: films # arbitrary name of node in dag
      type: table # table | prototype | component | part
      table: films # defaults to the name of the node if not provided
      source:
        strategy: io
        reader: pandas.read_csv
        kwargs:
          filepath_or_buffer: examples/films.csv # local or s3:// path
          sep: "|"
      sink:
        strategy: sql
        database: default
        kwargs:
          if_exists: append # defaults to fail
          index: false # Data is loaded into a pandas DataFrame this option ignores the index

    # Loading data into new table from inline data.
    - name: films2 # Note: "table" key not specified, so defaults to "film2"
      type: table
      source:
        strategy: io
        reader: inline
        kwargs:
          sep: ","
          data: |
            title,director,year
            t5,d1,2020
            t6,d2,2020
            t7,d1,2020
      sink:
        strategy: sql
        database: default
        kwargs:
          index: false

    # Writing table to parquet
    - name: films3
      type: table
      source:
        strategy: io
        reader: inline
        kwargs:
          sep: ","
          data: |
            title,director,year
            t5,d1,2020
            t6,d2,2020
            t7,d1,2020
      sink:
        strategy: parquet
        fname: test.parquet # can also be s3 location

    - name: product
      type: table
      source:
        strategy: knockoff
        kwargs:
          prototype: product
          columns: [division, gender, category, color, sku]
      sink:
        strategy: sql
        database: default
        kwargs:
          index: false
          if_exists: replace

    - name: location
      type: table
      source:
        strategy: knockoff
        kwargs:
          prototype: location
      sink:
        strategy: sql
        database: default
        kwargs:
          index: false
          if_exists: replace

    - name: transactions
      type: table
      source:
        strategy: knockoff
        kwargs:
          prototype: transactions
      sink:
        strategy: sql
        database: default
        kwargs:
          index: false
          if_exists: replace

    - name: channel-retail
      type: part
      source:
        strategy: inline
        data: [nfs, nso]
    - name: channel-digital
      type: part
      source:
        strategy: inline
        data: [digital]
    - name: division-shoes
      type: part
      source:
        strategy: inline
        data: [shoes]
    - name: division-apparel
      type: part
      source:
        strategy: inline
        data: [apparel]
    - name: gender
      type: part
      source:
        strategy: inline
        data: [men, women]
    - name: category-shoes
      type: part
      source:
        strategy: inline
        data: [lifestyle, running, jordan, skateboarding]
    - name: category-apparel
      type: part
      source:
        strategy: inline
        data: ['hoodies & sweatshirts', 'pants & tights', 'shorts', 'tops & t-shirts', 'jackets & vests']
    - name: color
      type: part
      source:
        strategy: faker
        method: color_name
        number: 5
    - name: division-category-shoes
      type: part
      source:
        strategy: cartesian-product
        index: [division, category]
        dependencies: [part:division-shoes, part:category-shoes]
    - name: division-category-apparel
      type: part
      source:
        strategy: cartesian-product
        index: [division, category]
        dependencies: [part:division-apparel, part:category-apparel]
    - name: division-category
      type: part
      source:
        strategy: concat
        dependencies: [part:division-category-shoes, part:division-category-apparel]
    - name: product
      type: prototype
      source:
        strategy: components
        number: 25
        components:
          - name: division
            type: component
            source:
              strategy: knockoff
              dependencies: [part:division-category.division]
          - name: gender
            type: component
            source:
              strategy: knockoff
              dependencies: [part:gender]
          - name: category
            type: component
            source:
              strategy: knockoff
              dependencies: [part:division-category.category]
          - name: color
            type: component
            source:
              strategy: knockoff
              dependencies: [part:color]
          - name: sku
            type: component
            source:
              strategy: faker
              method: numerify
              args: ['%#########']
              unique: true
          - name: poisson_lambda
            type: component
            source:
              strategy: faker
              method: pyfloat
              kwargs:
                min_value: 0
                max_value: 1
    - name: location-retail
      type: prototype
      source:
        strategy: components
        number: 5
        components:
          - name: address
            type: component
            source:
              strategy: faker
              method: address
          - name: location_id
            type: component
            source:
              strategy: autoincrement
              start_value: 1
          - name: channel
            type: component
            source:
              strategy: knockoff
              dependencies: [part:channel-retail]
    - name: location-ecomm
      type: prototype
      source:
        strategy: components
        number: 1
        components:
          - name: address
            type: component
            source:
              strategy: faker
              method: address
          - name: location_id
            type: component
            source:
              strategy: autoincrement
              start_value: 0
          - name: channel
            type: component
            source:
              strategy: knockoff
              dependencies: [part:channel-digital]
    - name: location
      type: prototype
      source:
        strategy: concat
        dependencies: [prototype:location-retail, prototype:location-ecomm]
    - name: transactions
      type: prototype
      source:
        strategy: components
        unique:
          - [order_id, line_id]
        number: 100
        components:
          - name: location_id
            type: component
            source:
              strategy: knockoff
              dependencies: [prototype:location.location_id]
          - name: sku
            type: component
            source:
              strategy: knockoff
              dependencies: [prototype:product.sku]
          - name: line_id
            type: component
            source:
              strategy: faker
              method: random_int
              kwargs:
                min: 1
                max: 5
          - name: order_id
            type: component
            source:
              strategy: faker
              method: numerify
              args: ['%#########']
          - name: quantity
            type: component
            source:
              strategy: function
              function: numpy.random.poisson
              dependencies: [prototype:product.poisson_lambda]
              input_kwargs:
                - key: lam
                  value: prototype:product.poisson_lambda
                  type: dependency # or constant
          - name: date
            type: component
            source:
              strategy: faker
              method: date_between
              kwargs:
                start_date: "-2y"
                end_date: "today"

    # Prototype from io strategy
    - name: films
      type: prototype
      source:
        strategy: io
        reader: inline
        kwargs:
          sep: ","
          data: |
            title,director,year
            t5,d1,2020
            t6,d2,2020
            t7,d1,2020
